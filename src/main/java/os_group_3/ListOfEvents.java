/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package os_group_3;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.CollectionReference;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.Query;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import java.awt.List;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author johnl
 */
public class ListOfEvents extends javax.swing.JFrame {

    /**
     * Creates new form LoginForm
     */
    public ListOfEvents() {
        initComponents();
    }

    
    LocalDate currentDate = LocalDate.now();
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backButton = new CustomComponents.button.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        roundedPanel1 = new CustomComponents.RoundedPanel();
        jLabel1 = new javax.swing.JLabel();
        addVisitor = new CustomComponents.button.Button();
        dateOfEvent = new com.toedter.calendar.JDateChooser();
        Enter = new CustomComponents.button.Button();
        addVisitor1 = new CustomComponents.button.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OS_Group3");
        setMinimumSize(new java.awt.Dimension(900, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 53, 84));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backButton.setBackground(new java.awt.Color(103, 146, 137));
        backButton.setForeground(new java.awt.Color(255, 250, 202));
        backButton.setText("Back");
        backButton.setFocusable(false);
        backButton.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        backButton.setRound(20);
        backButton.setShadowColor(new java.awt.Color(102, 102, 102));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 100, 40));

        dataTable.setBackground(new java.awt.Color(255, 250, 202));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Event Name", "Event Duration", "Date of Event"
            }
        ));
        jScrollPane1.setViewportView(dataTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 680, 320));

        roundedPanel1.setBackground(new java.awt.Color(255, 250, 202));
        roundedPanel1.setRoundBottomRight(20);
        roundedPanel1.setRoundTopRight(20);
        roundedPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("List of Events");
        roundedPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 180, -1));

        jPanel1.add(roundedPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 230, 50));

        addVisitor.setBackground(new java.awt.Color(103, 146, 137));
        addVisitor.setForeground(new java.awt.Color(255, 250, 202));
        addVisitor.setText("Delete Event");
        addVisitor.setFocusable(false);
        addVisitor.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        addVisitor.setRound(20);
        addVisitor.setShadowColor(new java.awt.Color(102, 102, 102));
        addVisitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVisitorActionPerformed(evt);
            }
        });
        jPanel1.add(addVisitor, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 510, 120, 50));

        dateOfEvent.setBackground(new java.awt.Color(255, 250, 202));
        dateOfEvent.setForeground(new java.awt.Color(0, 0, 0));
        dateOfEvent.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dateOfEventdateInput(evt);
            }
        });
        jPanel1.add(dateOfEvent, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 130, 210, 40));

        Enter.setBackground(new java.awt.Color(103, 146, 137));
        Enter.setForeground(new java.awt.Color(255, 250, 202));
        Enter.setText("Enter");
        Enter.setFocusable(false);
        Enter.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        Enter.setShadowColor(new java.awt.Color(102, 102, 102));
        Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterActionPerformed(evt);
            }
        });
        jPanel1.add(Enter, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 130, 80, 50));

        addVisitor1.setBackground(new java.awt.Color(103, 146, 137));
        addVisitor1.setForeground(new java.awt.Color(255, 250, 202));
        addVisitor1.setText("Add Event");
        addVisitor1.setFocusable(false);
        addVisitor1.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        addVisitor1.setRound(20);
        addVisitor1.setShadowColor(new java.awt.Color(102, 102, 102));
        addVisitor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVisitor1ActionPerformed(evt);
            }
        });
        jPanel1.add(addVisitor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 510, 120, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        show(false);
        EventList form = new EventList();
        form.show();
    }//GEN-LAST:event_backButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        showData();
    }//GEN-LAST:event_formWindowOpened

    private void addVisitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVisitorActionPerformed
       deleteSelectedRow();
    }//GEN-LAST:event_addVisitorActionPerformed

    private void dateOfEventdateInput(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dateOfEventdateInput

    }//GEN-LAST:event_dateOfEventdateInput

    private void EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterActionPerformed
        Date selectedDate = dateOfEvent.getDate();
            if (selectedDate == null) {
                JOptionPane.showMessageDialog(null,
                        "Please select a date first.",
                        "Date Error",
                        JOptionPane.WARNING_MESSAGE);
                return; // Exit the method if no date is selected
            }
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String eventDate = dateFormat.format(selectedDate);
        // Create a reference to the collection
        CollectionReference collectionRef = db_connect.db.collection("events");
        try {
            // Create a query to filter documents based on date_of_visit
            Query query = collectionRef.whereEqualTo("event_date", eventDate);

            // Execute the query
            ApiFuture<QuerySnapshot> querySnapshot = query.get();

            // Clear the existing rows in the table model
            DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
            tableModel.setRowCount(0);

            // Iterate over the documents in the result set
            for (QueryDocumentSnapshot document : querySnapshot.get().getDocuments()) {
                // Extract data from the document
              

                // Create the row data with the updated time
                Object[] rowData = {
                    document.getString("event_name"),
                    document.getString("event_duration"),
                    document.getString("event_date"),
                    };

                // Add the row to the table model
                tableModel.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "There's a problem in the database.",
                    "Database Error",
                    JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_EnterActionPerformed
private void deleteSelectedRow() {
    DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
    int selectedRow = dataTable.getSelectedRow();

    if (selectedRow == -1) {
        // If no row is selected, show a message
        JOptionPane.showMessageDialog(null,
                "Please select a row to delete.",
                "Selection Error",
                JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Ask for confirmation before deleting
    int option = JOptionPane.showConfirmDialog(null,
            "Are you sure you want to delete this row?",
            "Confirmation",
            JOptionPane.YES_NO_OPTION);

    if (option == JOptionPane.YES_OPTION) {
        // Remove the selected row from the table model
        String eventName = tableModel.getValueAt(selectedRow, 0).toString();
        String eventDuration = tableModel.getValueAt(selectedRow, 1).toString();
        String eventDate = tableModel.getValueAt(selectedRow, 2).toString();

        // Additional logic to delete from Firestore
        deleteDataFromFirestore(eventName, eventDuration, eventDate);
        tableModel.removeRow(selectedRow);

        // Additional logic to delete from Firestore or perform any other actions
        // ...

        JOptionPane.showMessageDialog(null,
                "Row deleted successfully.",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
    }
}
    private void addVisitor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVisitor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addVisitor1ActionPerformed
private void deleteDataFromFirestore(String eventName, String eventDuration, String eventDate) {
    try {
        // Create a reference to the collection
        CollectionReference collectionRef = db_connect.db.collection("events");

        // Create a query to filter documents based on the selected data
        Query query = collectionRef.whereEqualTo("event_name", eventName)
                                    .whereEqualTo("event_duration", eventDuration)
                                    .whereEqualTo("event_date", eventDate);

        // Execute the query
        ApiFuture<QuerySnapshot> querySnapshot = query.get();

        // Iterate over the documents in the result set
        for (QueryDocumentSnapshot document : querySnapshot.get().getDocuments()) {
            // Delete the document from Firestore
            document.getReference().delete();
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,
                "There's a problem in the database.",
                "Database Error",
                JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void showData() {    
        Date selectedDate = dateOfEvent.getDate();
            if (selectedDate == null) {
                JOptionPane.showMessageDialog(null,
                        "Please select a date first.",
                        "Date Error",
                        JOptionPane.WARNING_MESSAGE);
                return; // Exit the method if no date is selected
            }
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String eventDate = dateFormat.format(selectedDate);
        // Create a reference to the collection
        CollectionReference collectionRef = db_connect.db.collection("events");
        try {
            // Create a query to filter documents based on date_of_visit
            Query query = collectionRef.whereEqualTo("event_date", eventDate);

            // Execute the query
            ApiFuture<QuerySnapshot> querySnapshot = query.get();

            // Clear the existing rows in the table model
            DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
            tableModel.setRowCount(0);

            // Iterate over the documents in the result set
            for (QueryDocumentSnapshot document : querySnapshot.get().getDocuments()) {
                // Extract data from the document
              

                // Create the row data with the updated time
                Object[] rowData = {
                    document.getString("event_name"),
                    document.getString("event_duration"),
                    document.getString("event_date"),
                    };

                // Add the row to the table model
                tableModel.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "There's a problem in the database.",
                    "Database Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListOfEvents().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private CustomComponents.button.Button Enter;
    private CustomComponents.button.Button addVisitor;
    private CustomComponents.button.Button addVisitor1;
    private CustomComponents.button.Button backButton;
    private javax.swing.JTable dataTable;
    private com.toedter.calendar.JDateChooser dateOfEvent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private CustomComponents.RoundedPanel roundedPanel1;
    // End of variables declaration//GEN-END:variables
}
