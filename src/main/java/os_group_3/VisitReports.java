/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package os_group_3;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.CollectionReference;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.Query;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import java.awt.Component;
import java.awt.List;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author johnl
 */
public class VisitReports extends javax.swing.JFrame {

    /**
     * Creates new form LoginForm
     */
    public VisitReports() {
        initComponents();
    }

    
    LocalDate currentDate = LocalDate.now();
    DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    String formattedDate = currentDate.format(formatter2);
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        date = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        export = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OS_Group3");
        setMinimumSize(new java.awt.Dimension(900, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 53, 84));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dataTable.setBackground(new java.awt.Color(255, 250, 202));
        dataTable.setForeground(new java.awt.Color(0, 0, 0));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "PDL Name", "Relationship", "Date of Visit", "Time of Visit"
            }
        ));
        jScrollPane1.setViewportView(dataTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 740, 330));

        date.setBackground(new java.awt.Color(103, 146, 137));
        date.setForeground(new java.awt.Color(0, 0, 0));
        date.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                datedateInput(evt);
            }
        });
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 120, 160, 40));

        jButton1.setBackground(new java.awt.Color(103, 146, 137));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, 90, 40));

        export.setBackground(new java.awt.Color(103, 146, 137));
        export.setText("Export Data");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });
        jPanel1.add(export, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 510, 110, 40));

        jButton2.setBackground(new java.awt.Color(103, 146, 137));
        jButton2.setText("Enter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 120, -1, 40));

        jPanel2.setBackground(new java.awt.Color(255, 250, 202));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Visit Reports");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 240, 70));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 570));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
  // Get the current date
        Date currentDate = new Date();

        // Format the current date as "dd-MM-yyyy"
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String formattedDate = dateFormat.format(currentDate);

        // Set the formatted date to the JDateChooser
        try {
            // Parse the formatted date string to a Date
            Date parsedDate = dateFormat.parse(formattedDate);
            
            // Set the parsed date to the JDateChooser
            date.setDate(parsedDate);
        } catch (Exception e) {
            e.printStackTrace();
            // Handle the parsing exception if needed
        }
        showData();
    }//GEN-LAST:event_formWindowOpened
    
    
    private void datedateInput(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_datedateInput

    }//GEN-LAST:event_datedateInput
    Component frame;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       show(false);
        VisitingSchedule form = new VisitingSchedule();
        form.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
      SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date dateSelected = date.getDate();
        String date = dateFormat.format(dateSelected);
        
        CollectionReference colref = db_connect.db.collection("visitor");
        
        try {
            Query query = colref.whereEqualTo("date_of_visit", date);

            // Execute the query
            ApiFuture<QuerySnapshot> querySnapshot = query.get();

            // Check if any records exist
            boolean recordExists = !querySnapshot.get().getDocuments().isEmpty();

            // Check if records exist for the selected date
            if (!recordExists) {
                JOptionPane.showMessageDialog(frame, "There's no record to export!",
                        "Export Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                // Open file chooser dialog to select the file path to save the CSV file
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Save Excel File");
                fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files (*.csv)", "csv"));

                int userSelection = fileChooser.showSaveDialog(frame);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    String filePath = fileChooser.getSelectedFile().getAbsolutePath();

                    // Ensure the file path has the .csv extension
                    if (!filePath.toLowerCase().endsWith(".csv")) {
                        filePath += ".csv";
                    }

                    try (FileWriter writer = new FileWriter(filePath)) {
                        // Write the header row for the CSV file
                        writer.append("FIRST NAME");
                        writer.append(",");
                        writer.append("MIDDLE NAME");
                        writer.append(",");
                        writer.append("LAST NAME");
                        writer.append(",");
                        writer.append("SEX");
                        writer.append(",");
                        writer.append("AGE");
                        writer.append(",");
                        writer.append("CONTACT");
                        writer.append(",");
                        writer.append("ADDRESS");
                        writer.append(",");
                        writer.append("DATE OF VISIT");
                        writer.append(",");
                        writer.append("TIME OF VISIT");
                        writer.append(",");
                        writer.append("TIME OUT");
                        writer.append(",");
                        writer.append("RELATIONSHIP");
                        writer.append(",");
                        writer.append("PDL FIRST NAME");
                        writer.append(",");
                        writer.append("PDL LAST NAME");
                        writer.append("\n");

                        // Execute the query again to retrieve the records for export
                        QuerySnapshot result = query.get().get();

                        for (QueryDocumentSnapshot document : result.getDocuments()) {
                            // Write the data rows to the CSV file
                            writer.append(document.getString("first_name"));
                            writer.append(",");
                            writer.append(document.getString("middle_name"));
                            writer.append(",");
                            writer.append(document.getString("last_name"));
                            writer.append(",");
                            writer.append(document.getString("gender"));
                            writer.append(",");
                            writer.append(document.getString("age"));
                            writer.append(",");
                            writer.append(document.getString("contact_no"));
                            writer.append(",");
                            writer.append(document.getString("address"));
                            writer.append(",");
                            writer.append(document.getString("date_of_visit"));
                            writer.append(",");
                            writer.append(document.getString("time_of_visit"));
                            writer.append(",");
                            writer.append(document.getString("time_out"));
                            writer.append(",");
                            writer.append(document.getString("relationship"));
                            writer.append(",");
                            writer.append(document.getString("pdl_firstname"));
                            writer.append(",");
                            writer.append(document.getString("pdl_lastname"));
                            writer.append("\n");
                        }

                        writer.flush();

                        JOptionPane.showMessageDialog(frame, "Excel file saved successfully",
                                "Export Successful",
                                JOptionPane.INFORMATION_MESSAGE);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(frame, e,
                                "Export Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "There's a problem in the database.",
                    "Database Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_exportActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        SimpleDateFormat dateFormatter = new SimpleDateFormat("dd-MM-yyyy");
        Date dateSelected = date.getDate();
        
        String formattedDate = dateFormatter.format(dateSelected);
        
        
        
        CollectionReference collectionRef = db_connect.db.collection("visitor");
        
        try{
            Query query = collectionRef.whereEqualTo("date_of_visit", formattedDate);
            
            // Execute the query
            ApiFuture<QuerySnapshot> querySnapshot = query.get();

            // Clear the existing rows in the table model
            DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
            tableModel.setRowCount(0);

            // Iterate over the documents in the result set
            for (QueryDocumentSnapshot document : querySnapshot.get().getDocuments()) {
                // Extract data from the document
              

                // Create the row data with the updated time
               Object[] rowData = {
                    document.getString("first_name") + " " + document.getString("last_name"),
                    document.getString("pdl_firstname") + " " + document.getString("pdl_lastname"),
                    document.getString("relationship"),
                    document.getString("date_of_visit"),
                    document.getString("time_of_visit"),
                    };

                // Add the row to the table model
                tableModel.addRow(rowData);
            }
            
            if(tableModel.getRowCount() == 0){
                JOptionPane.showMessageDialog(null,
                    "No visit record on the selected date",
                    "Visit Record Empty!",
                    JOptionPane.WARNING_MESSAGE);
            }
                
        }catch(Exception e){
             e.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "There's a problem in the database.",
                    "Database Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
private void showData() {
        // Get the Firestore instance

        // Create a reference to the collection
        CollectionReference collectionRef = db_connect.db.collection("visitor");

        try {
            // Create a query to filter documents based on date_of_visit
            Query query = collectionRef.whereEqualTo("date_of_visit", formattedDate);

            // Execute the query
            ApiFuture<QuerySnapshot> querySnapshot = query.get();

            // Clear the existing rows in the table model
            DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
            tableModel.setRowCount(0);

            // Iterate over the documents in the result set
            for (QueryDocumentSnapshot document : querySnapshot.get().getDocuments()) {
                // Extract data from the document
              

                // Create the row data with the updated time
                Object[] rowData = {
                    document.getString("first_name") + " " + document.getString("last_name"),
                    document.getString("pdl_firstname") + " " + document.getString("pdl_lastname"),
                    document.getString("relationship"),
                    document.getString("date_of_visit"),
                    document.getString("time_of_visit"),
                    };

                // Add the row to the table model
                tableModel.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,
                    "There's a problem in the database.",
                    "Database Error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisitReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisitReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisitReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisitReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisitReports().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dataTable;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JButton export;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
